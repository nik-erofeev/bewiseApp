services:
  postgres:
    container_name: ${DOCKER_NAME}_postgres
    image: postgres:latest
#    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB__USER}
      POSTGRES_PASSWORD: ${DB__PASSWORD}
      POSTGRES_DB: ${DB__NAME}
    volumes:
      - postgres_buwise:/var/lib/postgresql/data
    networks:
      - custom
    ports:
      - "15432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB__USER} -d ${DB__NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 3

  api:
    container_name: ${DOCKER_NAME}_api
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    # command: ['/app_example/docker/app.sh']
    env_file:
      - .env
    depends_on:
      - postgres
      - redis
    ports:
      - "8000:8000"
    networks:
      - custom
    healthcheck:
       test: ["CMD", "curl", "-f", "http://localhost:8000/check_database"]
       interval: 30s
       timeout: 5s
       retries: 3

  redis:
    image: redis:6.2-alpine
    ports:
      - "6379:6379"
    networks:
      - custom

  zookeeper:
    platform: linux/x86_64
    container_name: ${DOCKER_NAME}-zookeeper
    image: confluentinc/cp-zookeeper:latest
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - '2181:2181'
    networks:
      - custom

  kafka:
    platform: linux/x86_64
    container_name: ${DOCKER_NAME}-kafka
    image: confluentinc/cp-kafka:latest
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'
      - '29092:29092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - custom


  kafka-ui:
    container_name: ${DOCKER_NAME}-kafka-ui
    image: provectuslabs/kafka-ui
    restart: unless-stopped
    ports:
      - "8090:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    depends_on:
      - kafka
    networks:
      - custom

volumes:
  postgres_buwise:
    driver: local


networks:
  custom:
    driver: bridge